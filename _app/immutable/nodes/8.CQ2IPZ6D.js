import{s as _,n}from"../chunks/scheduler.CQlsE29-.js";import{S as C,i as g,e as c,s as v,c as u,k as h,f,l as y,g as a,d as i}from"../chunks/index.xSuZ9O7b.js";const x=!0,P=Object.freeze(Object.defineProperty({__proto__:null,prerender:x},Symbol.toStringTag,{value:"Module"}));function w(D){let e,m='<h1 class="text-4xl mb-0 playwrite-font text-primary">CupidDB</h1> <br/> <h2 class="text-3xl mb-3">Server</h2>',l,r,p=`<hr class="my-4"/> <h2 class="text-2xl mb-4">CupidDB Server</h2>
  The CupidDB server was designed for speed and efficiency, written in Rust to ensure both high performance and correctness.
  At its core, the server uses a concurrent hashmap, enabling CupidDB to manage multiple client connections simultaneously.
  You can find the source code at GitHub and the Docker image at Docker Hub.
  <ul class="my-2"><li>Source code <a class="text-primary" target="_blank" href="https://github.com/cupiddb/cupiddb">GitHub</a>.</li> <li>Docker image <a class="text-primary" target="_blank" href="https://hub.docker.com/r/cupiddb/cupiddb">Docker Hub</a>.</li></ul>`,o,s,b=`<hr class="my-4"/> <h2 class="text-2xl mb-4">Environment Variables</h2>
  Environment variables are used to configure CupidDB’s behavior.
  They allow you to customize aspects like server ports, logging levels, and more.
  Below is a list of the key environment variables supported by CupidDB, along with their default values.

  <div class="overflow-x-auto"><table class="table table-lg"><thead><tr><th>Variable Name</th> <th>Description</th> <th>Possible Values</th> <th>Default Value</th></tr></thead> <tbody><tr><td>CUPID_BIND_ADDRESS</td> <td>The address CupidDB will bind to</td> <td>IP address</td> <td>0.0.0.0</td></tr> <tr><td>CUPID_PORT</td> <td>The port number CupidDB will listen to</td> <td>Port number</td> <td>5995</td></tr> <tr><td>CUPID_LOG_LEVEL</td> <td>Log level</td> <td>ERROR, WARN, INFO, DEBUG, TRACE</td> <td>INFO</td></tr> <tr><td>CUPID_WORKER_THREADS</td> <td>Number of worker threads CupidDB will use. The recommended value is the number of CPU cores.</td> <td>Positive integer</td> <td>Number of CPU cores available</td></tr> <tr><td>CUPID_CACHE_SHARDS</td> <td>Number of separate buckets, each with its own lock, allowing multiple threads to access different shards concurrently.</td> <td>2^n</td> <td>64</td></tr> <tr><td>CUPID_INITIAL_CAPACITY</td> <td>Number of key-value pairs the map can hold before needing to resize</td> <td>Positive integer</td> <td>64</td></tr> <tr><td>CUPID_GRACEFUL_TIMEOUT</td> <td>Number of seconds CupidDB will wait for client&#39;s command to complete before completely shutting down</td> <td>Positive integer</td> <td>30</td></tr></tbody></table></div> <h3 class="text-xl mb-4">Example</h3> <pre class="bg-gray-300 py-4 px-6 my-4 rounded-md overflow-x-scroll whitespace-pre-line">    docker run --rm -p 5995:5995 \\
      -e CUPID_WORKER_THREADS=4 \\
      -e CUPID_GRACEFUL_TIMEOUT=60 \\
      cupiddb/cupiddb:latest
  </pre>`;return{c(){e=c("div"),e.innerHTML=m,l=v(),r=c("div"),r.innerHTML=p,o=v(),s=c("div"),s.innerHTML=b,this.h()},l(t){e=u(t,"DIV",{class:!0,"data-svelte-h":!0}),h(e)!=="svelte-1qwiwn2"&&(e.innerHTML=m),l=f(t),r=u(t,"DIV",{"data-svelte-h":!0}),h(r)!=="svelte-137wr4p"&&(r.innerHTML=p),o=f(t),s=u(t,"DIV",{"data-svelte-h":!0}),h(s)!=="svelte-qmjzu8"&&(s.innerHTML=b),this.h()},h(){y(e,"class","mb-8")},m(t,d){a(t,e,d),a(t,l,d),a(t,r,d),a(t,o,d),a(t,s,d)},p:n,i:n,o:n,d(t){t&&(i(e),i(l),i(r),i(o),i(s))}}}class E extends C{constructor(e){super(),g(this,e,null,w,_,{})}}export{E as component,P as universal};
